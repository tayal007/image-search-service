#!/usr/bin/env node

/**
 * Module dependencies.
 */

var Q = require('q');
var app = require('../app');
var debug = require('debug')('alerts-framework:server');
var http = require('http');
var projectEnv = require('../config/projectEnv').projectEnv;
const logger = require('../logger');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || projectEnv.httpPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var defer = Q.defer();

var startServer = function () {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  return defer.promise;
};

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  logger.info('Listening on ' + bind);
  defer.resolve();
}

exports.startServer = startServer;
